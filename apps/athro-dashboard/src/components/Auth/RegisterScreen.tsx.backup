import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams, useLocation } from 'react-router-dom';
import {
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  Box,
  Alert,
  CircularProgress,
  styled,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  OutlinedInput,
  Checkbox,
  FormControlLabel,
  FormGroup,
  Stepper,
  Step,
  StepLabel,
  Divider,
} from '@mui/material';
import { createClient } from '@supabase/supabase-js';
import { stripeService } from '../../services/StripeService';
import { useAuth } from '../../contexts/AuthContext';

const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL || '',
  import.meta.env.VITE_SUPABASE_ANON_KEY || ''
);

const StyledContainer = styled('div')({
  minHeight: '100vh',
  color: '#ffffff',
  backgroundColor: '#0c0c0c',
  backgroundImage: 'url("/world/back3.jpg")',
  backgroundSize: 'cover',
  backgroundPosition: 'center',
  margin: 0,
  padding: 0,
  fontFamily: 'var(--body-font)',
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  alignItems: 'center',
});

const Overlay = styled('div')({
  background: 'rgba(17, 25, 21, 0.95)',
  padding: '40px 0',
  minHeight: '100vh',
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  alignItems: 'center',
  width: '100%',
});

const StyledPaper = styled(Paper)(({ theme }) => ({
  background: 'rgba(17, 25, 21, 0.95)',
  backdropFilter: 'blur(10px)',
  border: '1px solid rgba(228, 201, 126, 0.2)',
  borderRadius: '16px',
  padding: theme.spacing(4),
  width: '100%',
  maxWidth: 600,
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(3),
  boxShadow: '0 8px 32px rgba(0, 0, 0, 0.4)',
  '&:hover': {
    border: '1px solid rgba(228, 201, 126, 0.4)',
  }
}));

const StyledTitle = styled(Typography)({
  color: '#e4c97e',
  fontSize: '2.5rem',
  fontFamily: "'Playfair Display', serif",
  fontWeight: 800,
  textAlign: 'center',
  marginBottom: '1rem',
  textShadow: '0 0 32px #e4c97e, 0 0 12px #4fc38a, 0 0 2px #fff',
  background: 'linear-gradient(45deg, #e4c97e, #4fc38a)',
  WebkitBackgroundClip: 'text',
  WebkitTextFillColor: 'transparent',
  backgroundSize: '200% 200%',
  animation: 'gradient 3s ease infinite',
  letterSpacing: '-1px',
  '@keyframes gradient': {
    '0%, 100%': { backgroundPosition: '0% 50%' },
    '50%': { backgroundPosition: '100% 50%' }
  }
});

const StyledSubtitle = styled(Typography)({
  color: '#e4c97e',
  fontWeight: 'bold',
  textAlign: 'center',
  marginBottom: '1rem',
});

const StyledTextField = styled(TextField)({
  '& .MuiOutlinedInput-root': {
    color: '#fff',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: '12px',
    '& fieldset': {
      borderColor: 'rgba(228, 201, 126, 0.3)',
    },
    '&:hover fieldset': {
      borderColor: 'rgba(228, 201, 126, 0.6)',
    },
    '&.Mui-focused fieldset': {
      borderColor: '#e4c97e',
      boxShadow: '0 0 20px rgba(228, 201, 126, 0.3)',
    },
  },
  '& .MuiInputLabel-root': {
    color: '#e4c97e',
    '&.Mui-focused': {
      color: '#e4c97e',
    },
  },
});

const StyledFormControl = styled(FormControl)({
  '& .MuiOutlinedInput-root': {
    color: '#fff',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: '12px',
    '& fieldset': {
      borderColor: 'rgba(228, 201, 126, 0.3)',
    },
    '&:hover fieldset': {
      borderColor: 'rgba(228, 201, 126, 0.6)',
    },
    '&.Mui-focused fieldset': {
      borderColor: '#e4c97e',
      boxShadow: '0 0 20px rgba(228, 201, 126, 0.3)',
    },
  },
  '& .MuiInputLabel-root': {
    color: '#e4c97e',
    '&.Mui-focused': {
      color: '#e4c97e',
    },
  },
  '& .MuiSelect-icon': {
    color: '#e4c97e',
  },
});

const ActionButton = styled(Button)({
  background: '#e4c97e',
  color: '#000',
  fontSize: '1rem',
  fontWeight: 600,
  fontFamily: "'Playfair Display', serif",
  padding: '0.875rem',
  borderRadius: '12px',
  textTransform: 'none',
  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
  boxShadow: '0 0 20px rgba(228, 201, 126, 0.3)',
  '&:hover': {
    background: '#4fc38a',
    transform: 'translateY(-2px)',
    boxShadow: '0 6px 30px rgba(79, 195, 138, 0.4)',
  },
  '&.secondary': {
    background: 'transparent',
    border: '1px solid rgba(228, 201, 126, 0.5)',
    color: '#e4c97e',
    boxShadow: 'none',
    '&:hover': {
      background: 'rgba(228, 201, 126, 0.1)',
      borderColor: '#e4c97e',
      transform: 'translateY(-2px)',
      boxShadow: '0 6px 20px rgba(228, 201, 126, 0.2)',
    },
  }
});

const YEAR_GROUPS = [
  { value: 7, label: 'Year 7' },
  { value: 8, label: 'Year 8' },
  { value: 9, label: 'Year 9' },
  { value: 10, label: 'Year 10 (GCSE)' },
  { value: 11, label: 'Year 11 (GCSE)' },
  { value: 12, label: 'Year 12 (A-Level)' },
  { value: 13, label: 'Year 13 (A-Level)' },
];

interface RegisterScreenProps {
  onRegister?: () => void;
}

export const RegisterScreen: React.FC<RegisterScreenProps> = ({ onRegister }) => {
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useAuth();
  
  // Get tier from either URL params or location state
  const [searchParams] = useSearchParams();
  const requirePayment = searchParams.get('requirePayment') === 'true';
  
  // Determine the tier - if requirePayment is true, detect from user metadata or default to lite
  let selectedTier = location.state?.selectedTier || searchParams.get('tier') || 'free';
  if (requirePayment && user && selectedTier === 'free') {
    // If redirected for payment, try to get tier from user metadata
    const userTier = user.user_metadata?.tier;
    if (userTier && userTier !== 'free') {
      selectedTier = userTier;
    } else {
      // Default to lite if we can't determine the tier
      selectedTier = 'lite';
    }
  }
  
  // Form state
  const [step, setStep] = useState(0);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [fullName, setFullName] = useState('');
  const [preferredName, setPreferredName] = useState('');
  const [school, setSchool] = useState('');
  const [year, setYear] = useState<number | ''>('');
  
  // UI state
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [verificationSent, setVerificationSent] = useState(false);
  const [registrationComplete, setRegistrationComplete] = useState(false);
  const [userId, setUserId] = useState<string | null>(null);

  // Handle automatic payment redirect for verified users
  useEffect(() => {
    if (requirePayment && user) {
      console.log('🔄 User needs to complete payment, redirecting to payment step');
      console.log('🎯 Selected tier for payment:', selectedTier);
      setUserId(user.id);
      setEmail(user.email || '');
      setStep(0); // For payment flow, step 0 is the payment step
      setRegistrationComplete(true);
      setVerificationSent(false); // Make sure we don't show verification screen
    }
  }, [requirePayment, user, selectedTier]);

  const steps = requirePayment 
    ? ['Complete Payment'] // Simple flow for payment completion
    : selectedTier === 'free' 
      ? ['Account Details', 'Email Verification'] 
      : ['Account Details', 'Profile Setup', 'Email Verification', 'Payment'];

  const handleAccountSetup = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters long');
      return;
    }

    if (selectedTier === 'free') {
      // For free tier, go straight to registration
      await handleRegistration();
    } else {
      // For paid tiers, proceed to profile setup
      setStep(1);
    }
  };

  const handleProfileSetup = () => {
    if (!fullName.trim()) {
      setError('Please enter your full name');
      return;
    }
    if (!school.trim()) {
      setError('Please enter your school name');
      return;
    }
    if (!year) {
      setError('Please select your year group');
      return;
    }

    setError(null);
    setStep(2); // Move to email verification step
  };

  const handleRegistration = async () => {
    try {
      setLoading(true);
      
      const userData: any = {
        tier: selectedTier,
        full_name: fullName || '',
        preferred_name: preferredName || '',
        school: school || '',
        year: year || null,
      };

      const { data, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: userData,
        },
      });

      if (signUpError) {
        console.error('🚨 Supabase signup error details:', {
          message: signUpError.message,
          status: signUpError.status,
          statusCode: signUpError.status,
          details: signUpError
        });
        
        // Provide more helpful error messages
        if (signUpError.message.includes('Email address') && signUpError.message.includes('invalid')) {
          throw new Error(`Email validation failed. This might be due to:
1. Domain restrictions in your Supabase project
2. User might already exist
3. Email format restrictions

Please check your Supabase Dashboard → Authentication → Settings for domain restrictions.

Original error: ${signUpError.message}`);
        }
        
        throw signUpError;
      }

      if (data.user) {
        const user = data.user;
        setUserId(user.id);
        
        // Create profile entry
        const { error: profileError } = await supabase
          .from('profiles')
          .insert({
            id: user.id,
            full_name: fullName || null,
            preferred_name: preferredName || null,
            school: school || null,
            year: year || null,
            user_tier: selectedTier === 'pro' ? 'full' : selectedTier, // Map 'pro' to 'full'
          });

        if (profileError) {
          console.error('Profile creation error:', profileError);
          // Don't fail registration if profile creation fails
        }
      }

      setRegistrationComplete(true);
      setVerificationSent(true);
      if (onRegister) onRegister();
    } catch (err) {
      console.error('Registration error:', err);
      setError(err instanceof Error ? err.message : 'An error occurred during registration');
    } finally {
      setLoading(false);
    }
  };

  const handleEmailVerified = () => {
    if (selectedTier === 'free') {
      // Free tier goes directly to dashboard
      navigate('/dashboard');
    } else {
      // Paid tiers proceed to payment
      setStep(selectedTier === 'free' ? 1 : 3);
    }
  };

  const handlePayment = async () => {
    if (!userId) {
      setError('Registration not completed. Please try again.');
      return;
    }

    try {
      setLoading(true);
      
      // Determine the tier for payment - check user metadata if current tier is 'free'
      let paymentTier = selectedTier;
      if (requirePayment && user && selectedTier === 'free' && user.user_metadata?.tier) {
        paymentTier = user.user_metadata.tier;
        console.log('🎯 Using user metadata tier for payment:', paymentTier);
      }
      
      // Default to 'lite' if we still don't have a valid paid tier
      if (paymentTier === 'free') {
        paymentTier = 'lite';
        console.log('⚠️ No paid tier found, defaulting to lite');
      }
      
      console.log('🔄 Redirecting to Stripe payment...');
      
      // For now, show a message that you need to set up Stripe Payment Links
      setError(`Ready for payment! 

To complete the setup, you need to:
1. Create Stripe Payment Links in your Stripe Dashboard
2. Update the payment URLs in your code

Current tier: ${paymentTier}
User ID: ${userId}

For now, you can manually update the user tier in your database.`);
      
      setLoading(false);
      
      // Alternative: You can manually update the user tier for testing
      // Uncomment the lines below to auto-upgrade the user for testing:
      
      // await stripeService.updateUserTier(userId, paymentTier === 'pro' ? 'full' : 'lite');
      // console.log('✅ User tier updated for testing');
      // navigate('/dashboard');
      
    } catch (err) {
      console.error('Payment error:', err);
      setError(err instanceof Error ? err.message : 'Failed to create payment session');
      setLoading(false);
    }
  };

  const handleResendEmail = async () => {
    try {
      setLoading(true);
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: email,
      });

      if (error) throw error;
      setError('Verification email resent successfully! Please check your inbox.');
    } catch (err) {
      console.error('Resend email error:', err);
      setError(err instanceof Error ? err.message : 'Failed to resend verification email');
    } finally {
      setLoading(false);
    }
  };

  const handleBackToLogin = () => {
    navigate('/login');
  };

  const handleBackToPlans = () => {
    navigate('/');
  };

  // Email verification screen (but not if user is redirected for payment)
  if (verificationSent && !requirePayment) {
    return (
      <StyledContainer>
        <Overlay>
          <StyledPaper>
            <StyledTitle variant="h5">
              Check Your Email
            </StyledTitle>
            <Typography align="center" paragraph sx={{ color: '#fff', mb: 3 }}>
              We've sent a verification link to {email}. Please check your email and click the link to verify your account.
            </Typography>
            <Typography align="center" sx={{ color: '#e4c97e', mb: 3 }}>
              After verification, you'll be redirected to {selectedTier === 'free' ? 'your dashboard' : 'complete your payment'}.
            </Typography>
            <ActionButton
              onClick={handleResendEmail}
              disabled={loading}
            >
              {loading ? <CircularProgress size={24} /> : 'Resend Verification Email'}
            </ActionButton>
            <ActionButton
              className="secondary"
              onClick={handleBackToLogin}
            >
              Back to Login
            </ActionButton>
            {error && (
              <Alert 
                severity={error.includes('resent') ? 'success' : 'error'} 
                sx={{ 
                  backgroundColor: error.includes('resent') ? 'rgba(79, 195, 138, 0.1)' : 'rgba(228, 201, 126, 0.1)',
                  color: error.includes('resent') ? '#4fc38a' : '#e4c97e',
                  border: `1px solid ${error.includes('resent') ? '#4fc38a' : '#e4c97e'}`,
                }}
              >
                {error}
              </Alert>
            )}
          </StyledPaper>
        </Overlay>
      </StyledContainer>
    );
  }

  return (
    <StyledContainer>
      <Overlay>
        <StyledPaper>
          <StyledTitle variant="h5">
            Create Your Account
          </StyledTitle>
          <StyledSubtitle variant="subtitle1">
            {requirePayment 
              ? `Complete Payment - ${selectedTier === 'pro' ? 'AthroAI' : selectedTier === 'lite' ? 'AthroAI LITE' : 'FREE'} Plan`
              : `${selectedTier === 'pro' ? 'AthroAI' : selectedTier === 'lite' ? 'AthroAI LITE' : 'FREE'} Plan`
            }
          </StyledSubtitle>

          {/* Progress Stepper */}
          <Stepper activeStep={step} sx={{ mb: 4 }}>
            {steps.map((label) => (
              <Step key={label}>
                <StepLabel sx={{ 
                  '& .MuiStepLabel-label': { color: '#e4c97e' },
                  '& .MuiStepIcon-root': { color: 'rgba(228, 201, 126, 0.3)' },
                  '& .MuiStepIcon-root.Mui-active': { color: '#e4c97e' },
                  '& .MuiStepIcon-root.Mui-completed': { color: '#4fc38a' },
                }}>
                  {label}
                </StepLabel>
              </Step>
            ))}
          </Stepper>

          {/* Payment-only flow for redirected users */}
          {requirePayment && step === 0 && (
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h6" sx={{ color: '#e4c97e', mb: 2 }}>
                Complete Your Payment
              </Typography>
              <Typography sx={{ color: '#fff', mb: 3 }}>
                Welcome back! Complete your payment to activate your {selectedTier === 'pro' ? 'AthroAI' : selectedTier === 'lite' ? 'AthroAI LITE' : 'subscription'} subscription.
              </Typography>
              <Typography sx={{ color: '#e4c97e', fontWeight: 'bold', mb: 3 }}>
                {(() => {
                  const tierName = selectedTier === 'pro' ? 'AthroAI' : 'AthroAI LITE';
                  const price = selectedTier === 'pro' ? '£19.99/month' : '£9.99/month';
                  return `${tierName} - ${price}`;
                })()}
              </Typography>
              
              {error && (
                <Alert 
                  severity="error"
                  sx={{ 
                    backgroundColor: 'rgba(228, 201, 126, 0.1)',
                    color: '#e4c97e',
                    border: '1px solid #e4c97e',
                    mb: 3
                  }}
                >
                  {error}
                </Alert>
              )}
              
              <ActionButton
                onClick={handlePayment}
                disabled={loading}
                sx={{ mb: 2 }}
              >
                {loading ? <CircularProgress size={24} /> : 'Complete Payment'}
              </ActionButton>
              
              <Typography sx={{ color: '#fff', fontSize: '0.875rem', mt: 2, opacity: 0.7 }}>
                ⚠️ Payment is required to activate your {selectedTier === 'pro' ? 'AthroAI' : selectedTier === 'lite' ? 'AthroAI LITE' : 'subscription'} subscription
              </Typography>
            </Box>
          )}

          {/* Step 0: Account Details (for normal registration flow) */}
          {!requirePayment && step === 0 && (
            <Box component="form" onSubmit={handleAccountSetup} sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              <StyledTextField
                label="Email"
                type="email"
                fullWidth
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
              <StyledTextField
                label="Password"
                type="password"
                fullWidth
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                helperText="Minimum 6 characters"
              />
              <StyledTextField
                label="Confirm Password"
                type="password"
                fullWidth
                required
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
              />

              {selectedTier === 'free' && (
                <>
                  <Divider sx={{ borderColor: 'rgba(228, 201, 126, 0.2)', my: 2 }} />
                  <Typography variant="h6" sx={{ color: '#e4c97e' }}>Optional Profile Information</Typography>
                  <StyledTextField
                    label="Full Name"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                  />
                  <StyledTextField
                    label="Preferred Name"
                    value={preferredName}
                    onChange={(e) => setPreferredName(e.target.value)}
                    helperText="How you'd like AthroAI to address you"
                  />
                  <StyledTextField
                    label="School"
                    value={school}
                    onChange={(e) => setSchool(e.target.value)}
                  />
                  <StyledFormControl>
                    <InputLabel>Year Group</InputLabel>
                    <Select
                      value={year}
                      label="Year Group"
                      onChange={(e) => setYear(e.target.value as number)}
                    >
                      {YEAR_GROUPS.map((yearGroup) => (
                        <MenuItem key={yearGroup.value} value={yearGroup.value}>
                          {yearGroup.label}
                        </MenuItem>
                      ))}
                    </Select>
                  </StyledFormControl>
                </>
              )}

              {error && (
                <Alert 
                  severity="error"
                  sx={{ 
                    backgroundColor: 'rgba(228, 201, 126, 0.1)',
                    color: '#e4c97e',
                    border: '1px solid #e4c97e',
                  }}
                >
                  {error}
                </Alert>
              )}

              <Box sx={{ display: 'flex', gap: 2, flexDirection: 'column' }}>
                <ActionButton
                  type="submit"
                  disabled={loading}
                >
                  {loading ? <CircularProgress size={24} /> : 
                    selectedTier === 'free' ? 'Create Account' : 'Continue'
                  }
                </ActionButton>
                <ActionButton
                  className="secondary"
                  onClick={handleBackToPlans}
                >
                  Back to Plans
                </ActionButton>
              </Box>
            </Box>
          )}

          {/* Step 1: Profile Setup (for paid tiers) */}
          {step === 1 && selectedTier !== 'free' && (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              <Typography variant="h6" sx={{ color: '#e4c97e' }}>Complete Your Profile</Typography>
              
              <StyledTextField
                label="Full Name"
                required
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
              />
              <StyledTextField
                label="Preferred Name"
                value={preferredName}
                onChange={(e) => setPreferredName(e.target.value)}
                helperText="How you'd like AthroAI to address you"
              />
              <StyledTextField
                label="School"
                required
                value={school}
                onChange={(e) => setSchool(e.target.value)}
              />
              <StyledFormControl required>
                <InputLabel>Year Group</InputLabel>
                <Select
                  value={year}
                  label="Year Group"
                  onChange={(e) => setYear(e.target.value as number)}
                >
                  {YEAR_GROUPS.map((yearGroup) => (
                    <MenuItem key={yearGroup.value} value={yearGroup.value}>
                      {yearGroup.label}
                    </MenuItem>
                  ))}
                </Select>
              </StyledFormControl>

              {error && (
                <Alert 
                  severity="error"
                  sx={{ 
                    backgroundColor: 'rgba(228, 201, 126, 0.1)',
                    color: '#e4c97e',
                    border: '1px solid #e4c97e',
                  }}
                >
                  {error}
                </Alert>
              )}

              <Box sx={{ display: 'flex', gap: 2 }}>
                <ActionButton
                  onClick={() => setStep(0)}
                  className="secondary"
                  sx={{ flex: 1 }}
                >
                  Back
                </ActionButton>
                <ActionButton
                  onClick={handleProfileSetup}
                  sx={{ flex: 1 }}
                >
                  Continue to Verification
                </ActionButton>
              </Box>
            </Box>
          )}

          {/* Step 2: Email Verification (for paid tiers) */}
          {step === 2 && selectedTier !== 'free' && (
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h6" sx={{ color: '#e4c97e', mb: 2 }}>
                Ready to Create Your Account
              </Typography>
              <Typography sx={{ color: '#fff', mb: 3 }}>
                Click below to create your account and send verification email.
              </Typography>
              
              <ActionButton
                onClick={handleRegistration}
                disabled={loading}
                sx={{ mb: 2 }}
              >
                {loading ? <CircularProgress size={24} /> : 'Create Account & Send Verification'}
              </ActionButton>
              
              <ActionButton
                onClick={() => setStep(1)}
                className="secondary"
              >
                Back to Profile
              </ActionButton>
            </Box>
          )}

          {/* Step 3: Payment (for paid tiers) */}
          {step === 3 && selectedTier !== 'free' && (
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h6" sx={{ color: '#e4c97e', mb: 2 }}>
                Complete Your Payment
              </Typography>
              <Typography sx={{ color: '#fff', mb: 3 }}>
                {requirePayment 
                  ? `Welcome back! Complete your payment to activate your subscription.`
                  : `Your account has been created! Complete your payment to activate your ${selectedTier === 'pro' ? 'AthroAI' : 'AthroAI LITE'} subscription.`
                }
              </Typography>
              <Typography sx={{ color: '#e4c97e', fontWeight: 'bold', mb: 3 }}>
                {(() => {
                  // Determine display tier and price
                  let displayTier = selectedTier;
                  if (requirePayment && user && selectedTier === 'free' && user.user_metadata?.tier) {
                    displayTier = user.user_metadata.tier;
                  }
                  if (displayTier === 'free') displayTier = 'lite'; // Default fallback
                  
                  const tierName = displayTier === 'pro' ? 'AthroAI' : 'AthroAI LITE';
                  const price = displayTier === 'pro' ? '£19.99/month' : '£9.99/month';
                  
                  return `${tierName} - ${price}`;
                })()}
              </Typography>
              
              {error && (
                <Alert 
                  severity="error"
                  sx={{ 
                    backgroundColor: 'rgba(228, 201, 126, 0.1)',
                    color: '#e4c97e',
                    border: '1px solid #e4c97e',
                    mb: 3
                  }}
                >
                  {error}
                </Alert>
              )}
              
              <ActionButton
                onClick={handlePayment}
                disabled={loading}
                sx={{ mb: 2 }}
              >
                {loading ? <CircularProgress size={24} /> : 'Complete Payment'}
              </ActionButton>
              
              <Typography sx={{ color: '#fff', fontSize: '0.875rem', mt: 2, opacity: 0.7 }}>
                ⚠️ Payment is required to activate your {selectedTier === 'pro' ? 'AthroAI' : selectedTier === 'lite' ? 'AthroAI LITE' : 'subscription'} subscription
              </Typography>
            </Box>
          )}
        </StyledPaper>
      </Overlay>
    </StyledContainer>
  );
}; 