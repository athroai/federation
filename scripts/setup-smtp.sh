#!/bin/bash

# AthroAI SMTP Setup Script
# This script helps you configure SMTP settings for your project

set -e

echo "ðŸš€ AthroAI SMTP Setup"
echo "===================="
echo ""

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

print_info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    print_error "Please run this script from the project root directory"
    exit 1
fi

echo "Select your SMTP provider:"
echo "1) Resend (Recommended)"
echo "2) SendGrid"
echo "3) Amazon SES"
echo "4) Mailgun"
echo "5) Custom/Other"
echo ""

read -p "Enter your choice (1-5): " provider_choice

case $provider_choice in
    1)
        SMTP_HOST="smtp.resend.com"
        SMTP_PORT="587"
        SMTP_USER="resend"
        provider_name="Resend"
        echo ""
        print_info "Great choice! Resend is developer-friendly and reliable."
        echo "Please sign up at https://resend.com if you haven't already."
        echo ""
        read -p "Enter your Resend API key (starts with 're_'): " SMTP_PASS
        ;;
    2)
        SMTP_HOST="smtp.sendgrid.net"
        SMTP_PORT="587"
        SMTP_USER="apikey"
        provider_name="SendGrid"
        echo ""
        print_info "SendGrid is a reliable choice for transactional emails."
        echo "Get your API key from https://app.sendgrid.com/settings/api_keys"
        echo ""
        read -p "Enter your SendGrid API key (starts with 'SG.'): " SMTP_PASS
        ;;
    3)
        SMTP_HOST="email-smtp.us-east-1.amazonaws.com"
        SMTP_PORT="587"
        provider_name="Amazon SES"
        echo ""
        print_info "Amazon SES is cost-effective for high-volume emails."
        echo "Make sure you have SES access keys from AWS IAM."
        echo ""
        read -p "Enter your AWS Access Key ID: " SMTP_USER
        read -p "Enter your AWS Secret Access Key: " SMTP_PASS
        ;;
    4)
        SMTP_HOST="smtp.mailgun.org"
        SMTP_PORT="587"
        provider_name="Mailgun"
        echo ""
        print_info "Mailgun offers good API integration and analytics."
        echo "Get your credentials from https://app.mailgun.com/app/account/security/api_keys"
        echo ""
        read -p "Enter your Mailgun domain (e.g., mg.yourdomain.com): " mailgun_domain
        SMTP_USER="postmaster@$mailgun_domain"
        read -p "Enter your Mailgun password: " SMTP_PASS
        ;;
    5)
        provider_name="Custom"
        echo ""
        print_info "Setting up custom SMTP configuration."
        read -p "Enter SMTP host: " SMTP_HOST
        read -p "Enter SMTP port (usually 587 or 465): " SMTP_PORT
        read -p "Enter SMTP username: " SMTP_USER
        read -p "Enter SMTP password: " SMTP_PASS
        ;;
    *)
        print_error "Invalid choice. Exiting."
        exit 1
        ;;
esac

echo ""
read -p "Enter sender name (e.g., 'AthroAI'): " SMTP_FROM_NAME
read -p "Enter sender email (e.g., 'noreply@yourdomain.com'): " SMTP_FROM_EMAIL

# Create environment variables
echo ""
print_status "Creating environment configuration..."

# Create or update .env.local for development
ENV_FILE=".env.local"
echo "# SMTP Configuration - Generated by setup-smtp.sh" > $ENV_FILE
echo "SMTP_HOST=$SMTP_HOST" >> $ENV_FILE
echo "SMTP_PORT=$SMTP_PORT" >> $ENV_FILE
echo "SMTP_USER=$SMTP_USER" >> $ENV_FILE
echo "SMTP_PASS=$SMTP_PASS" >> $ENV_FILE
echo "SMTP_FROM_NAME=$SMTP_FROM_NAME" >> $ENV_FILE
echo "SMTP_FROM_EMAIL=$SMTP_FROM_EMAIL" >> $ENV_FILE
echo "" >> $ENV_FILE

print_status "Environment variables saved to $ENV_FILE"

# Update production template
if [ -f "apps/athro-dashboard/env.production.template" ]; then
    print_status "Updating production template..."
    sed -i.bak \
        -e "s|SMTP_HOST=.*|SMTP_HOST=$SMTP_HOST|" \
        -e "s|SMTP_PORT=.*|SMTP_PORT=$SMTP_PORT|" \
        -e "s|SMTP_USER=.*|SMTP_USER=$SMTP_USER|" \
        -e "s|SMTP_FROM_NAME=.*|SMTP_FROM_NAME=$SMTP_FROM_NAME|" \
        -e "s|SMTP_FROM_EMAIL=.*|SMTP_FROM_EMAIL=$SMTP_FROM_EMAIL|" \
        apps/athro-dashboard/env.production.template
fi

echo ""
print_status "SMTP setup completed for $provider_name!"
echo ""

print_info "Next steps:"
echo "1. Configure SMTP settings in your Supabase dashboard:"
echo "   - Go to Project Settings â†’ Authentication â†’ Email Templates"
echo "   - Update SMTP settings with the values above"
echo "   - Customize your email templates"
echo ""
echo "2. For production deployment:"
echo "   - Add these environment variables to your hosting platform (Vercel, etc.)"
echo "   - Test email sending before going live"
echo ""
echo "3. Test your setup:"
echo "   - Try the password reset or email confirmation flow"
echo "   - Check your SMTP provider's dashboard for delivery status"
echo ""

# Show configuration summary
echo "ðŸ“‹ Configuration Summary:"
echo "========================"
echo "Provider: $provider_name"
echo "Host: $SMTP_HOST"
echo "Port: $SMTP_PORT"
echo "Username: $SMTP_USER"
echo "From Name: $SMTP_FROM_NAME"
echo "From Email: $SMTP_FROM_EMAIL"
echo ""

print_warning "Important Security Notes:"
echo "- Never commit SMTP credentials to version control"
echo "- Use different credentials for development and production"
echo "- Enable 2FA on your SMTP provider account"
echo "- Monitor email sending limits and quotas"
echo ""

# Test connection option
read -p "Would you like to test the SMTP connection? (y/n): " test_connection

if [ "$test_connection" = "y" ] || [ "$test_connection" = "Y" ]; then
    echo ""
    print_info "Testing SMTP connection..."
    
    if command -v curl >/dev/null 2>&1; then
        case $provider_choice in
            1) # Resend
                read -p "Enter test email address: " test_email
                curl -X POST https://api.resend.com/emails \
                    -H "Authorization: Bearer $SMTP_PASS" \
                    -H "Content-Type: application/json" \
                    -d "{
                        \"from\": \"$SMTP_FROM_NAME <$SMTP_FROM_EMAIL>\",
                        \"to\": [\"$test_email\"],
                        \"subject\": \"AthroAI SMTP Test\",
                        \"html\": \"<p>Your SMTP configuration is working! ðŸŽ‰</p><p>This test email was sent from your AthroAI setup.</p>\"
                    }" && print_status "Test email sent successfully!" || print_error "Failed to send test email"
                ;;
            *)
                print_warning "Automated testing not available for this provider."
                print_info "Please test manually by triggering an email in your application."
                ;;
        esac
    else
        print_warning "curl not found. Please test manually."
    fi
fi

echo ""
print_status "Setup complete! Check the SMTP_SETUP_GUIDE.md for detailed configuration instructions."
echo "" 